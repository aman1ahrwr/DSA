/* Non optimised solution
long long trappingWater(int arr[], int n){
        int left[n];
        int right[n];
        left[0] = arr[0];
        for(int i=1; i<n; i++){
            left[i] = max(left[i-1],arr[i]);
        }
        right[n-1] = arr[n-1];
        for(int j=n-2; j>=0; j--){
            right[j] = max(right[j+1],arr[j]);
        }
        long long ans = 0;
        for(int k=0; k<n; k++){
            ans += (min(left[k],right[k]) - arr[k]);
        }
        return ans;
    }
*/

// Optimised Two pointer approach
int trap(vector<int>& height) {
        int res=0;
        int left = 0;
        int right = height.size()-1;
        int maxLeft = 0, maxRight = 0;
        
        while(left<right){
            
            if(height[left]<=height[right]){
            
                if(height[left]>maxLeft) maxLeft = height[left];
                else res += maxLeft-height[left];
                
               left++;
            
            }else{
                
                if(height[right]>maxRight) maxRight = height[right];
                else res += maxRight-height[right];
                
                right--;
            }
        }
        return res;
    }
