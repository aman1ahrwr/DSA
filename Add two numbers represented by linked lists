// Striver's Optimised and Better approach (reverse numbers already given)
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();
        ListNode* temp = dummy;
        int carry = 0;
        while(l1!=NULL || l2!=NULL || carry!=0){
            int sum=0;
            if(l1!=NULL){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2=l2->next;
            }
            
            sum+=carry;
            carry = sum/10;
            ListNode* node = new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return dummy->next;
    }
// End of Code




















// Unoptimised approach
Node* reverse(Node* head){
        Node* curr = head;
        Node* prev = NULL;
        Node* temp;
        while(curr){
            temp = curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        first = reverse(first);
        second = reverse(second);
        int s = 0;
        int c = 0;
        Node* res = NULL;
        Node* curr = NULL;
        
        while(first || second){
            s = c + (first?first->data:0) + (second?second->data:0);
            c = (s>=10)?1:0;
            s = s%10;
            Node* temp = new Node(s);
            if(res==NULL){
                res=temp;
            }else{
                curr->next = temp;    
            }
            curr=temp;
            if(first) first=first->next;
            if(second) second=second->next;
        }
        
        if(c>0){
            Node* temp = new Node(c);
            curr->next=temp;
            curr=temp;
        }
        res = reverse(res);
        return res;
    }
